const Todo = require("../models/todo.model");

async function getAllTodos(req, res, next) {
  let todos;
  try {
    todos = await Todo.getAllTodos();
  } catch (error) {
    return next(error);
  }

  res.json({
    todos: todos,
  });
  // this will send back a response in JSON format.
  // the data that is sent back here is actually the todos array
}

async function addTodo(req, res, next) {
  const todoText = req.body.text;
  // When we send the request, we need to make sure that this incoming
  // post request body has a text filed inside it.

  const todo = new Todo(todoText);

  let insertedId;
  try {
    const result = await todo.save();
    insertedId = result.insertedId;
    // in the save() method of Todo class of todo.model.js, we return a promise
    // that is yielded by insertOne()
    // and it turns out that the promise yielded by insertOne eventually results to
    // an object which holds the id that was inserted.
    // So now, result.insertedId will exist on result object, because this result object
    // is generated by MongoDB and it will hold the id of the todo that was created.
  } catch (error) {
    return next(error);
  }

  todo.id = insertedId.toString();

  res.json({ message: "Added todo successfully", createdTodo: todo });
  // We always send back JSON responses when we build APIs.
  // We never send back HTML and we never redirect when creating APIs.
}

async function updateTodo(req, res, next) {
  const todoId = req.params.id;
  // the patch and delete routes has the id in the url
  // PATCH/todos/:id
  // Therefor, we can use req.params.id to access the id of the todo
  const newTodoText = req.body.newText;

  const todo = new Todo(newTodoText, todoId);

  try {
    await todo.save();
  } catch (error) {
    return next(error);
  }
  res.json({ message: "Todo updated", updatedTodo: todo });
}

async function deleteTodo(req, res, next) {
  const todoId = req.params.id;
  // the patch and delete routes has the id in the url
  // PATCH/todos/:id
  // Therefor, we can use req.params.id to access the id of the todo

  const todo = new Todo(null, todoId);

  try {
    await todo.delete();
  } catch (error) {
    return next(error);
  }
  res.json({ message: "Todo deleted" });
}

module.exports = {
  getAllTodos: getAllTodos,
  addTodo: addTodo,
  updateTodo: updateTodo,
  deleteTodo: deleteTodo,
};
